require "test_helper"
module Autogenerated
class DocsPathTest < Minitest::Spec
  it do
    module A
      module Song
      end

      #:path
      module Song::Operation
        class Charge < Trailblazer::Operation
          #~meths
          include T.def_tasks(:a, :b, :c, :d, :e)
          #~meths end
          step :validate
          step :decide_type, Output(:failure) => Path(terminus: :with_cc) do
            step :authorize
            step :charge
          end
          step :direct_debit
        end
      end
      #:path end
    end

    assert_process_for A::Song::Operation::Charge, :success, :with_cc, :failure, %{
#<Start/:default>
 {Trailblazer::Operation::Right} => <*validate>
<*validate>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*decide_type>
<*decide_type>
 {Trailblazer::Operation::Left} => <*authorize>
 {Trailblazer::Operation::Right} => <*direct_debit>
<*authorize>
 {Trailblazer::Operation::Right} => <*charge>
<*charge>
 {Trailblazer::Operation::Right} => #<End/:with_cc>
<*direct_debit>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => #<End/:success>
#<End/:success>

#<End/:with_cc>

#<End/:failure>
}

    module B
      module Song
      end

      #:path-join
      module Song::Operation
        class Charge < Trailblazer::Operation
          #~meths
          include T.def_steps(:validate, :decide_type, :direct_debit, :finalize, :authorize, :charge)
          #~meths end
          step :validate
          step :decide_type, Output(:failure) => Path(connect_to: Id(:finalize)) do
            step :authorize
            step :charge
          end
          step :direct_debit
          step :finalize
        end
      end
      #:path-join end
    end

    assert_process_for B::Song::Operation::Charge, :success, :failure, %{
#<Start/:default>
 {Trailblazer::Operation::Right} => <*validate>
<*validate>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*decide_type>
<*decide_type>
 {Trailblazer::Operation::Left} => <*authorize>
 {Trailblazer::Operation::Right} => <*direct_debit>
<*authorize>
 {Trailblazer::Operation::Right} => <*charge>
<*charge>
 {Trailblazer::Operation::Right} => <*finalize>
<*direct_debit>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*finalize>
<*finalize>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => #<End/:success>
#<End/:success>

#<End/:failure>
}

    assert_invoke B::Song::Operation::Charge, seq: "[:validate, :decide_type, :direct_debit, :finalize]"

    assert_invoke B::Song::Operation::Charge, decide_type: false, seq: "[:validate, :decide_type, :authorize, :charge, :finalize]"
  end

  it "works in Railway" do
    module C
      module Song
      end
      CreditCard = Class.new
      DebitCard  = Class.new

      #:path-railway
      module Song::Operation
        class Charge < Trailblazer::Operation
          MySignal = Class.new(Trailblazer::Operation::Signal)
          #~meths
          include T.def_steps(:validate, :decide_type, :direct_debit, :finalize, :authorize, :charge)
          #:path-decider
          def decide_type(ctx, model:, **)
            if model.is_a?(CreditCard)
              return MySignal # go the Path() way!
            elsif model.is_a?(DebitCard)
              return true
            else
              return false
            end
          end
          #:path-decider end
          #~meths end
          step :validate
          step :decide_type, Output(MySignal, :credit_card) => Path(connect_to: Id(:finalize)) do
            step :authorize
            step :charge
          end
          step :direct_debit
          step :finalize
        end
      end
      #:path-railway end
    end

    assert_process_for C::Song::Operation::Charge, :success, :failure, %{
#<Start/:default>
 {Trailblazer::Operation::Right} => <*validate>
<*validate>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*decide_type>
<*decide_type>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*direct_debit>
 {DocsPathTest::C::Song::Operation::Charge::MySignal} => <*authorize>
<*authorize>
 {Trailblazer::Operation::Right} => <*charge>
<*charge>
 {Trailblazer::Operation::Right} => <*finalize>
<*direct_debit>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*finalize>
<*finalize>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => #<End/:success>
#<End/:success>

#<End/:failure>
}

    assert_invoke C::Song::Operation::Charge, model: C::DebitCard.new, seq: "[:validate, :direct_debit, :finalize]"

    assert_invoke C::Song::Operation::Charge, model: C::CreditCard.new, seq: "[:validate, :authorize, :charge, :finalize]"

    assert_invoke C::Song::Operation::Charge, model: nil, seq: "[:validate]", terminus: :failure
  end

  it "allows multiple Path()s per step" do
    module D
      class Charge < Trailblazer::Operation
        include T.def_steps(:validate, :decide_type, :direct_debit, :finalize, :authorize, :charge)

        failure_path = ->(*) { step :go }
        success_path = ->(*) { step :surf }

        step :validate
        step :decide_type,
          Output(:failure) => Path(connect_to: Id(:finalize), &failure_path),
          Output(:success) => Path(connect_to: Id(:finalize), &success_path)
        step :direct_debit
        step :finalize
      end
      #:path-railway end
    end

    assert_process_for D::Charge, :success, :failure, %{
#<Start/:default>
 {Trailblazer::Operation::Right} => <*validate>
<*validate>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*decide_type>
<*decide_type>
 {Trailblazer::Operation::Left} => <*go>
 {Trailblazer::Operation::Right} => <*surf>
<*go>
 {Trailblazer::Operation::Right} => <*finalize>
<*surf>
 {Trailblazer::Operation::Right} => <*finalize>
<*direct_debit>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*finalize>
<*finalize>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => #<End/:success>
#<End/:success>

#<End/:failure>
}
  end

  it "Path() => Track(:success) will connect the path's end to a track" do
    module E
      class Charge < Trailblazer::Operation
        include T.def_steps(:validate, :decide_type, :direct_debit, :finalize, :authorize, :charge)

        step :validate
        step :decide_type,
          Output(:failure) => Path(connect_to: Track(:success)) do
            step :go
          end
        step :direct_debit
        step :finalize
      end

    # Insert step just after the path joins.
      class Overcharge < Charge
        step :overcharge, before: :direct_debit # we want {go --> overcharge --> direct_debit}
      end
    end

    assert_process_for E::Charge, :success, :failure, %{
#<Start/:default>
 {Trailblazer::Operation::Right} => <*validate>
<*validate>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*decide_type>
<*decide_type>
 {Trailblazer::Operation::Left} => <*go>
 {Trailblazer::Operation::Right} => <*direct_debit>
<*go>
 {Trailblazer::Operation::Right} => <*direct_debit>
<*direct_debit>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*finalize>
<*finalize>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => #<End/:success>
#<End/:success>

#<End/:failure>
}

    assert_process_for E::Overcharge, :success, :failure, %{
#<Start/:default>
 {Trailblazer::Operation::Right} => <*validate>
<*validate>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*decide_type>
<*decide_type>
 {Trailblazer::Operation::Left} => <*go>
 {Trailblazer::Operation::Right} => <*overcharge>
<*go>
 {Trailblazer::Operation::Right} => <*overcharge>
<*overcharge>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*direct_debit>
<*direct_debit>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*finalize>
<*finalize>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => #<End/:success>
#<End/:success>

#<End/:failure>
}
  end

  it "{Path() ..., before: :element} will add all path steps {before}" do
    module F
      class Charge < Trailblazer::Operation
        step :b
        step :f
        step :a, before: :b, # note the {:before}
          Output(:failure) => Path(connect_to: Track(:success), before: :b) do
            step :c
            step :d # {d} must go into {f}
          end
      end
    end

    assert_process_for F::Charge, :success, :failure, %{
#<Start/:default>
 {Trailblazer::Operation::Right} => <*a>
<*a>
 {Trailblazer::Operation::Left} => <*c>
 {Trailblazer::Operation::Right} => <*b>
<*c>
 {Trailblazer::Operation::Right} => <*d>
<*d>
 {Trailblazer::Operation::Right} => <*b>
<*b>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => <*f>
<*f>
 {Trailblazer::Operation::Left} => #<End/:failure>
 {Trailblazer::Operation::Right} => #<End/:success>
#<End/:success>

#<End/:failure>
}
  end
end
end